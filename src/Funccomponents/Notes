<!-- Task 1....{ Git Hub & Git Commands To Know Every Developer} -->
Git Hub:
At a high level, GitHub is a website and cloud-based service that helps developers store and manage their code, as well as track and control changes to their code. To understand exactly what GitHub is, you need to know two connected principles:

1)Version control
2)Git
<!-- Git Hub Commands: -->
git Clone (HTTPS Link) = Cloned Successfully

<!-- #Initializing the repository -->git init

<!-- Staging files -->
git add . file1.js      #To add a files in giy hub
git add file1.js file2.js   #stages a multiple values
git add.    #stages the current directory and all its content
 
<!-- Viewing the Status -->
git status #Full Status (Current Branch+ Changes to be commited +changes not staged for commit)
git status -s #Short Status

<!-- Git Branching -->
git branch(Saranya)  #To Creates a branch saranya
git Checkout (Saranya)  #Move to the main Branch
git branch =  To View the Current Branch

<!-- Committing the staged files -->
git commit - m "Message"   #Commit with a oneline message
git commit   #opens the default editor to type a long message

<!-- Skipping the stageing area -->
git Commit-am "Message"

git push = Push confirmation
git remote add origin (URL) To add the remote Repository
git  push- u origin main

<!-- Task 2 Main Concepts In ReactJs-->
 #What is React js?
 # User Interface Library .. Single Page WebApplication means The webpage Does not Reloaded Example(Facebook)...
 <!-- It is An Server Side Rendering -->  #SSR Fastly Interactable
 <!-- 1)DOM Model   --> #To Analyse a HTML Content ...To Show a Webpage
 <!-- 2)Virtual DOM Model --> #To Change the Particular Portion

 Data Binding In websistes:
  <!-- In One way Data binding  -->
  Parent Component to Use the Child Component but not Child to Parent Must we have To use means We Use  #Redux.
  <!-- Two Way Data Binding-->
  Two Way data Bindings are Parent with Child & Child with Parent Both Concept Or Method We Use #Angular.
  
 #Main Concepts:
1)  <!-- Hello World -->
    # HTML
    <div id="root">
    <!-- This element's contents will be replaced with your component. -->
    </div>
    # JS
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<h1>Hello, world!</h1>);

 <!-- Features Of Reactjs -->
2) <!-- JSX -->
    *Javascript and XML It Is An language
    *Allow Us to Write HTML in React...
    *Javascript{} + HTML<> =In ReactJs {<...>}
    * Fastest Rendering(Fastly Loaded)Specific Portion will be refresh
    * Easiest & Perfect Efficient Coding
    <!-- Javascript Embed into HTML....{JSX CODE} -->
    const name = 'Saranya';
    const element = <h1>Hello, {name}</h1>;
   <!--  Rendering Elements -->
   const root = ReactDOM.createRoot(
   document.getElementById('root')
   );
   const element = <h1>Hello, world</h1>;
   root.render(element);
<!-- how to render elements: -->
    First Import the copmponent into the App.js
   In App Components  Inside a pareant tag div... we use the render element example<Counter/>
<!-- Components -->
    <inside the abgular brackets ic called components>
<!-- Types of components -->
    #Class comp...Eg
      class Welcome extends React.Component {
       render() {
      return <h1>Hello, {this.props.name}</h1>;
       }
    }
    #functinal comp...Eg 
    export default function Profile() {
  return (
    <img
      src="https://i.imgur.com/MK3eW3Am.jpg"
      alt="Katherine Johnson"
    />
  )
}
<!-- Props  -->
PROPS
1.passed to component
2.Props are Immeutable(Object)...Does not re-assign the value
3.Props can be Accessed as //props(In function components we use props),//This.props                 
(In class components we use this.props)
4.They are like Parameters passed to a Function.


<!-- example for props: -->
    <Profile firstname = "Saranya" lastname ="sarah"/>
 <!-- How to recieve the props in func comp? -->
    eg...
    function Property(props){
    console.log(props);
    return(<div>
         <h1>
         name:{props.name} 
         </h1>
         <h1>
         age:{props.age}
         </h1>
         <h1>
         place:{props.place} 

         </h1>;
         </div>
    )
}
export default Property;
<!-- State -->
  1.Contained inside the components
  2.In State values can be Change
  3.In Functinal component we use.....hooks concept
  //Use State
  //Use effect
  In class component we use .......
  //this.state
  4.They are like variables declared in the Function body.
<!-- Example for Functional Components using State -->
import { useState } from "react";
function FunctionalCounter(){
    const [counter,setCounter] =useState(0)
    const increment =() =>{
        setCounter(counter+1);
        
    }
    const decrement =() =>{
        setCounter(counter-1);
        if(counter==-1){
            alert("There is nothing to decrease")
        }
    }
   
    return<div>
        <div>Counter value in Functional components <br/> {counter} </div>
        <br/>
        <button type="button"onClick={increment}>Increment</button>
        &nbsp;
        <button type="button"onClick={decrement}>Decrement</button>
        </div>
}
export default FunctionalCounter; 
<!-- Example For Class Components Using Props -->
import React,{ Component } from "react";
class Counter extends Component{
        state={
            count:0
        }
        OnIncrement=()=>{
        console.log(this)
        this.setState((prevstate=>({count:prevstate.count+1})))
        }
        OnDecrement=()=>{
        console.log(this)
        this.setState((prevstate=>({count:prevstate.count-1})))
        }
        render(){
        const {count}=this.state;
        return(
        <div>
        <p>Counter value in Class components</p>
        <p>{count}</p>
        <button type="button"onClick={ this.OnIncrement}>Increment</button>
        <button type="button"onClick={ this.OnDecrement}>Decrement</button>
        </div>
    )
    }
}

export default Counter

<!-- Handling Events -->

  <!-- .Onclick  -->
  for Button will be clicked.
  eg.
  <input onClick={buttonclick}>
  function buttonclick()
  {
    setIndex(1);
  }

 <!-- .Onsubmit  -->
  for Forms Submit bUtton
  <form onsubmit="console.log('You clicked submit.'); return false">
  <button type="submit">Submit</button>
</form>
<!-- e.prevent Default -->After submitting the button A Page doesnot Reloaded
function Form() {
  function handleSubmit(e) {
    e.preventDefault();
    console.log('You clicked submit.');
  }

  return (
    <form onSubmit={handleSubmit}>
      <button type="submit">Submit</button>
    </form>
  );
}

 <!-- OnChange -->
 In Input Field the value will be accesessed.
import React from 'react';
function Forms(){
    function handleChange(event){
        console.log(event.target.value);
    }
    return(
        <div>
            <h1>New Changes</h1>
            <input
            onChange={handleChange}
            type="text" placeholder="Enter Your Name"
            />
            <button>Submit</button>
        </div>
    )
}
export default Forms

<!-- For example, the HTML: -->
  <button onclick="activateLasers()">
  Activate Lasers
</button>
 <!-- is slightly different in React: -->
  <button onClick={activateLasers}>
  Activate Lasers
  </button>
<!-- Conditional Rendering -->
    <!-- In conditional rendering we use if else Conditional Statements-->
    There are Two methods in Conditional Rendering They are if else,Ternary Condition.
    <!-- Conditional Rendering -->
    import { useState} from "react";
    export default function ConditionalComponent(){
    const [display,setDisplay] =useState(false);
    let output;
    if(display){
     output = <h2>This is a condtional component</h2>
     } else{
     return(
     output = <h3>Nothing to see here</h3>
     )
    }
    return <div>{output}</div>
}

<!-- Ternary Conditional -->
import { useState} from "react";
export default function TernaryCondition(){
const [display,setDisplay] =useState(true);
return display ? (
    <div>
    <h2>This is a Ternary Conditional</h2>
    </div>
) : (
    <div>
    <h2>Nothing to see here</h2>
    </div>
);
}
<!--  List and Keys-->
to Iterate over array and render the array elements as a list use map()
Map function()
<!-- Example for the mapfunction -->
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map((number) => number * 2);
console.log(doubled);
This code logs [2, 4, 6, 8, 10] to the console.
<!-- Keys -->
Keys are used in React to identify which items in the list are changed, updated, or deleted. In other words, we can say that keys are used to give an identity to the elements in the lists.
<!-- How To Use Keys -->
import React from "react";
const Developers = ()=>
{
  const Developer = [
   {
         name:'SaranyaSarah',
         Skills:[
         {name:'ReactJS',type:'Frontend'},
         {name:'NodeJS',type:'Backend'}
        ]
    },
    {  
        name: 'Saro',
        Skills: [
         { name:'AngularJS',type:'Frontend'},
         { name:'ExpressJS',type:'Backend' }
        ]
    }
  ]

return(
    <div>
{Developer.map((Dev,index) => (
  <div key={index}>
    <h2>{Dev.name} Skills</h2>
      <div>
        {Dev.Skills.map((Skills,index)=>(
            <p key={index}>
              {Skills.type} -{Skills.name} 
            </p>
        ))}
       </div>
    </div>
    
  )
)
}
</div>
)
}
export default Developers

<!-- Forms -->

<!-- <input>Field For Submit-->
<form>
  <label>
    Name:
    <input type="text" name="name" />
  </label>
  <input type="submit" value="Submit" />
</form>

 <textarea> saranya</textarea>

  <!-- <select> -->
    <option value="grapefruit">Grapefruit</option>
    <option value="lime">Lime</option>
    <option selected value="coconut">Coconut</option>
    <option value="mango">Mango</option>
  </select>

  <!-- LIFTING STATE UP -->
     IN Lifting There are two methods to use ....

  <!-- Components with State Lifted -->
   import React from 'react'
   import { useState } from 'react'
   import Pan from './Pan';

   const Acc = () => {
 
   const[index,setIndex]=useState(-1);
   return (
   <div>
   <h2>Components with State Lifted</h2>
   <Pan title='JB' isActive={index===0} onShow={()=>setIndex(0)}>it's JB</Pan>
   <Pan title='Drake' isActive={index===1} onShow={()=>setIndex(1)}>Drake here</Pan>
   </div>
   )
  }

  export default Acc

  <!-- Components without State Lifted -->

  import React from "react";

  import Panel from "./Panel";
 const Accordion=()=>{
 return(
 <div>
 <h2>Components without State Lifted</h2>
 <Panel title='Pradeep Kumar'>
    hi !I am a Singer
    </Panel>
    <Panel title='Sid Sriram'>
      hi! I am a Singer
      </Panel>
     </div>
  )  
}
export default  Accordion